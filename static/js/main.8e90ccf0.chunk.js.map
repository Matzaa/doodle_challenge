{"version":3,"sources":["Messages.js","WriteChat.js","App.js","reportWebVitals.js","index.js"],"names":["Messages","props","end","useRef","useEffect","console","log","current","scrollIntoView","behaviour","block","inline","id","messages","map","eachMsg","className","author","message","Date","timestamp","toLocaleString","_id","ref","WriteChat","name","onChange","e","handleChange","onKeyDown","placeholder","value","chatMessage","onClick","postMsg","App","useState","setChatMessage","setAuthor","setMessages","getMsgs","fetch","then","res","json","response","method","body","JSON","stringify","headers","token","result","catch","err","arg","target","key","preventDefault","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAEe,SAASA,EAASC,GAC7B,IAAMC,EAAMC,mBAcZ,OAXAC,qBAAU,WACNC,QAAQC,IAAI,OACRJ,EAAIK,SACJL,EAAIK,QAAQC,eAAe,CACvBC,UAAW,SACXC,MAAO,MACPC,OAAQ,eAMhB,8BACI,sBAAKC,GAAG,WAAR,UACKX,EAAMY,UACHZ,EAAMY,SAASC,KAAI,SAACC,GAAD,OACf,sBACIC,UAAS,mBACc,OAAnBD,EAAQE,OAAkB,KAAO,UAFzC,UAMI,4BAAuB,OAAnBF,EAAQE,QAAmBF,EAAQE,SACvC,6BAAKF,EAAQG,UACb,oBAAGF,UAAU,OAAb,UACK,IACA,IAAIG,KAAKJ,EAAQK,WAAWC,sBAN5BN,EAAQO,QAUzB,qBAAKC,IAAKrB,SClCX,SAASsB,EAAUvB,GAC9B,OACI,sBAAKW,GAAG,OAAR,UACI,0BACIa,KAAK,MACLC,SAAU,SAACC,GAAD,OAAO1B,EAAM2B,aAAaD,IACpCE,UAAW,SAACF,GAAD,OAAO1B,EAAM2B,aAAaD,IACrCG,YAAY,UACZC,MAAO9B,EAAM+B,cAEjB,wBAAQC,QAAShC,EAAMiC,QAAvB,qB,MCPG,SAASC,IAAO,IAAD,EACYC,mBAAS,IADrB,mBACnBJ,EADmB,KACNK,EADM,OAEED,mBAAS,MAFX,mBAEnBnB,EAFmB,KAEXqB,EAFW,OAGMF,mBAAS,IAHf,mBAGnBvB,EAHmB,KAGT0B,EAHS,KAK1BnC,qBAAU,WACNoC,MACD,IAEH,IAAMA,EAAU,WACZnC,QAAQC,IAAI,aACZmC,MAAM,iFAGDC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACHxC,QAAQC,IAAI,SAAUuC,GACtBN,EAAYM,OAIlBX,EAAU,WACZO,MAAM,4DAA6D,CAC/DK,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjB/B,QAASc,EACTf,OAAQA,IAGZiC,QAAS,CACL,eAAgB,mBAChBC,MAAO,kBAGVT,MAAK,SAACC,GACHA,EAAIC,UAEPF,MAAK,SAACU,GACH/C,QAAQC,IAAI,mBAAoB8C,GAChCZ,IACAH,EAAe,OAElBgB,OAAM,SAACC,GACJjD,QAAQC,IAAI,sBAAuBgD,OAc/C,OACI,gCACI,cAACtD,EAAD,CAAUa,SAAUA,IAWpB,cAACW,EAAD,CACII,aAAc,SAAC2B,GAAD,OAvBtBlB,GADkBV,EAwB0B4B,GAvB3BC,OAAOzB,OACxBO,EAAU,WACI,UAAVX,EAAE8B,MACF9B,EAAE+B,iBACFxB,IACAP,EAAE6B,OAAOzB,MAAQ,KANJ,IAACJ,GAyBVK,YAAaA,EACbE,QAASA,OC9EzB,IAYeyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5BZ,M","file":"static/js/main.8e90ccf0.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\n\nexport default function Messages(props) {\n    const end = useRef();\n\n    // scroll to end on load\n    useEffect(() => {\n        console.log(\"hey\");\n        if (end.current) {\n            end.current.scrollIntoView({\n                behaviour: \"smooth\",\n                block: \"end\",\n                inline: \"nearest\",\n            });\n        }\n    });\n\n    return (\n        <div>\n            <div id=\"messages\">\n                {props.messages &&\n                    props.messages.map((eachMsg) => (\n                        <div\n                            className={`chat-box ${\n                                eachMsg.author === \"me\" ? \"me\" : \"others\"\n                            }`}\n                            key={eachMsg._id}\n                        >\n                            <p>{eachMsg.author !== \"me\" && eachMsg.author}</p>\n                            <h2>{eachMsg.message}</h2>\n                            <p className=\"date\">\n                                {\" \"}\n                                {new Date(eachMsg.timestamp).toLocaleString()}\n                            </p>\n                        </div>\n                    ))}\n                <div ref={end}></div>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\n\nexport default function WriteChat(props) {\n    return (\n        <div id=\"chat\">\n            <textarea\n                name=\"msg\"\n                onChange={(e) => props.handleChange(e)}\n                onKeyDown={(e) => props.handleChange(e)}\n                placeholder=\"Message\"\n                value={props.chatMessage}\n            ></textarea>\n            <button onClick={props.postMsg}>Send</button>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Messages from \"./Messages\";\nimport WriteChat from \"./WriteChat\";\nimport \"./App.css\";\n\nexport default function App() {\n    const [chatMessage, setChatMessage] = useState(\"\");\n    const [author, setAuthor] = useState(\"me\");\n    const [messages, setMessages] = useState([]);\n\n    useEffect(() => {\n        getMsgs();\n    }, []);\n\n    const getMsgs = () => {\n        console.log(\"hooked up\");\n        fetch(\n            `https://chatty.kubernetes.doodle-test.com/api/chatty/v1.0/?token=ruYNT6HEXCel`\n        )\n            .then((res) => res.json())\n            .then((response) => {\n                console.log(\"data :\", response);\n                setMessages(response);\n            });\n    };\n\n    const postMsg = () => {\n        fetch(`https://chatty.kubernetes.doodle-test.com/api/chatty/v1.0`, {\n            method: \"POST\",\n            body: JSON.stringify({\n                message: chatMessage,\n                author: author,\n            }),\n\n            headers: {\n                \"Content-Type\": \"application/json\",\n                token: \"ruYNT6HEXCel\",\n            },\n        })\n            .then((res) => {\n                res.json();\n            })\n            .then((result) => {\n                console.log(\"what came back: \", result);\n                getMsgs();\n                setChatMessage(\"\");\n            })\n            .catch((err) => {\n                console.log(\"error in POST req: \", err);\n            });\n    };\n\n    const handleChange = (e) => {\n        setChatMessage(e.target.value);\n        setAuthor(\"me\");\n        if (e.key === \"Enter\") {\n            e.preventDefault();\n            postMsg();\n            e.target.value = \"\";\n        }\n    };\n\n    return (\n        <div>\n            <Messages messages={messages} />\n            {/* <div id=\"chat\">\n                <textarea\n                    name=\"msg\"\n                    onChange={(e) => handleChange(e)}\n                    onKeyDown={(e) => handleChange(e)}\n                    placeholder=\"Message\"\n                    value={chatMessage}\n                ></textarea>\n                <button onClick={postMsg}>Send</button>\n            </div> */}\n            <WriteChat\n                handleChange={(arg) => handleChange(arg)}\n                chatMessage={chatMessage}\n                postMsg={postMsg}\n            />\n        </div>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}